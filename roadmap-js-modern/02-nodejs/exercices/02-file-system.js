// ====================================
// Exercice 2: Syst√®me de fichiers (fs)
// ====================================

console.log("üìÅ Exercice 2: Syst√®me de fichiers avec Node.js");
console.log("===============================================");

console.log("\nüìö Le module `fs` (File System) permet:");
console.log("‚Ä¢ Lire et √©crire des fichiers");
console.log("‚Ä¢ Cr√©er et supprimer des r√©pertoires");
console.log("‚Ä¢ Manipuler le syst√®me de fichiers");
console.log("‚Ä¢ Surveiller les changements de fichiers");
console.log("‚Ä¢ G√©rer les permissions et m√©tadonn√©es");

// TODO 1: Op√©rations de fichiers de base
console.log("\nüìù TODO 1: Cr√©ez des fonctions pour:");
console.log("‚Ä¢ readTextFile(filePath) - Lire un fichier texte");
console.log("‚Ä¢ writeTextFile(filePath, content) - √âcrire dans un fichier");
console.log("‚Ä¢ appendToFile(filePath, content) - Ajouter du contenu");
console.log("‚Ä¢ deleteFile(filePath) - Supprimer un fichier");
console.log("‚Ä¢ fileExists(filePath) - V√©rifier l'existence");

// TODO 2: Gestion des r√©pertoires
console.log("\nüìÅ TODO 2: Impl√©mentez des fonctions pour:");
console.log("‚Ä¢ createDirectory(dirPath) - Cr√©er un r√©pertoire");
console.log("‚Ä¢ listDirectory(dirPath) - Lister le contenu");
console.log("‚Ä¢ removeDirectory(dirPath) - Supprimer un r√©pertoire");
console.log("‚Ä¢ getDirectoryStats(dirPath) - Obtenir les statistiques");

// TODO 3: Lecture/√©criture JSON
console.log("\nüìã TODO 3: Cr√©ez des utilitaires JSON:");
console.log("‚Ä¢ readJsonFile(filePath) - Lire et parser un JSON");
console.log("‚Ä¢ writeJsonFile(filePath, data) - √âcrire un objet en JSON");
console.log(
  "‚Ä¢ updateJsonFile(filePath, updates) - Mettre √† jour partiellement"
);
console.log("‚Ä¢ validateJsonFile(filePath, schema) - Valider la structure");

// TODO 4: Surveillance de fichiers
console.log("\nüëÄ TODO 4: Impl√©mentez un syst√®me de surveillance:");
console.log("‚Ä¢ FileWatcher class - Surveiller les changements");
console.log("‚Ä¢ √âmettre des √©v√©nements pour: created, modified, deleted");
console.log("‚Ä¢ G√©rer les filtres par extension");
console.log("‚Ä¢ Debounce pour √©viter les √©v√©nements multiples");

// TODO 5: Gestionnaire de logs
console.log("\nüìú TODO 5: Cr√©ez un syst√®me de logs bas√© sur fs:");
console.log("‚Ä¢ LogManager class - G√©rer les fichiers de logs");
console.log("‚Ä¢ Rotation automatique par taille ou date");
console.log("‚Ä¢ Compression des anciens logs");
console.log("‚Ä¢ Nettoyage automatique des logs expir√©s");

// TODO 6: Sauvegarde et archivage
console.log("\nüíæ TODO 6: D√©veloppez un syst√®me de sauvegarde:");
console.log("‚Ä¢ BackupManager class - Cr√©er des sauvegardes");
console.log("‚Ä¢ Compression ZIP des dossiers");
console.log("‚Ä¢ Sauvegarde incr√©mentale bas√©e sur les dates");
console.log("‚Ä¢ Restauration depuis une sauvegarde");

// TODO 7: Analyseur de fichiers
console.log("\nüîç TODO 7: Construisez un analyseur de fichiers:");
console.log("‚Ä¢ analyzeDirectory(path) - Analyser un r√©pertoire");
console.log("‚Ä¢ Calculer la taille totale et nombre de fichiers");
console.log("‚Ä¢ Grouper par extensions");
console.log("‚Ä¢ D√©tecter les doublons (m√™me contenu)");
console.log("‚Ä¢ Identifier les gros fichiers");

// TODO 8: Traitement par chunks
console.log("\nüîÑ TODO 8: Impl√©mentez le traitement par chunks:");
console.log("‚Ä¢ processLargeFile(filePath, processor) - Traiter par chunks");
console.log("‚Ä¢ splitFile(filePath, chunkSize) - Diviser un gros fichier");
console.log("‚Ä¢ mergeFiles(fileList, outputPath) - Fusionner des fichiers");
console.log("‚Ä¢ calculateFileHash(filePath) - Calculer le hash MD5/SHA256");

// Structure de donn√©es d'exemple
console.log("\nüìä DONN√âES D'EXEMPLE:");

// Exemple de configuration de surveillance
const watcherConfig = {
  directories: ["./src", "./config"],
  extensions: [".js", ".json", ".txt"],
  ignorePatterns: ["node_modules", ".git", "*.tmp"],
  debounceTime: 300,
  events: ["change", "add", "unlink"],
};

console.log(
  "üîß Configuration surveillance:",
  JSON.stringify(watcherConfig, null, 2)
);

// Exemple de structure de log
const logEntry = {
  timestamp: new Date().toISOString(),
  level: "info",
  message: "Fichier trait√© avec succ√®s",
  metadata: {
    fileName: "data.json",
    fileSize: 1024,
    processingTime: 150,
  },
};

console.log("üìù Entr√©e de log:", JSON.stringify(logEntry, null, 2));

// Exemple de rapport d'analyse
const analysisReport = {
  path: "./project",
  totalFiles: 1250,
  totalSize: "45.6 MB",
  extensions: {
    ".js": { count: 340, size: "12.3 MB" },
    ".json": { count: 25, size: "2.1 MB" },
    ".md": { count: 15, size: "450 KB" },
    ".png": { count: 80, size: "15.2 MB" },
  },
  largestFiles: [
    { name: "bundle.js", size: "3.2 MB" },
    { name: "data.json", size: "2.8 MB" },
  ],
  duplicates: [{ files: ["logo.png", "assets/logo.png"], size: "150 KB" }],
};

console.log("üìä Rapport d'analyse:", JSON.stringify(analysisReport, null, 2));

// Points d'apprentissage cl√©s
console.log("\nüéØ CONCEPTS CL√âS √Ä MA√éTRISER:");
console.log("‚úÖ fs.promises vs callbacks vs sync");
console.log("‚úÖ Streams pour les gros fichiers");
console.log("‚úÖ Path manipulation avec le module path");
console.log("‚úÖ Error handling pour les op√©rations I/O");
console.log("‚úÖ File descriptors et permissions");
console.log("‚úÖ Performance et gestion m√©moire");
console.log("‚úÖ Cross-platform compatibility");
console.log("‚úÖ Security considerations");

// Outils et bonnes pratiques
console.log("\nüõ†Ô∏è OUTILS ET BONNES PRATIQUES:");
console.log("üì¶ Modules recommand√©s: fs-extra, chokidar, fast-glob");
console.log("üîí Validation des chemins et sanitization");
console.log("‚ö° Utilisation des streams pour les performances");
console.log("üß™ Tests avec des fichiers temporaires");
console.log("üìù Logging d√©taill√© des op√©rations I/O");
console.log("üö´ √âviter les op√©rations sync en production");

console.log("\nüöÄ Commencez par le TODO 1 et progressez √©tape par √©tape !");
console.log("üí° Testez chaque fonction avec diff√©rents cas d'usage.");

/* 
EXEMPLES D'UTILISATION ATTENDUS:

// Lecture de fichier
const content = await readTextFile('./data.txt');

// √âcriture avec gestion d'erreur
await writeTextFile('./output.txt', 'Hello World')
  .catch(err => console.error('Erreur √©criture:', err));

// Surveillance avec callback
const watcher = new FileWatcher('./src');
watcher.on('change', (filePath) => {
  console.log('Fichier modifi√©:', filePath);
});

// Analyse de r√©pertoire
const report = await analyzeDirectory('./project');
console.log(`${report.totalFiles} fichiers, ${report.totalSize}`);

// Sauvegarde
const backup = new BackupManager('./data', './backups');
await backup.createBackup('daily-backup');
*/
