// =========================================
// Exercice 9: Closure
// =========================================

console.log("üü® Exercice 9: Closure");
console.log("======================");

console.log(
  "\nüìö Rappel: Une closure permet √† une fonction d'acc√©der aux variables"
);
console.log(
  "de son environnement lexical, m√™me apr√®s que cette port√©e soit ferm√©e."
);

// TODO 1: Cr√©er createBankAccount
console.log("\n‚úÖ Exercice 1: Compte bancaire");

// function createBankAccount(initialBalance) {
//   let balance = initialBalance;

//   return {
//     deposit(amount) {
//       if (amount > 0) {
//         balance += amount;
//         console.log(`D√©p√¥t de ${amount}‚Ç¨. Nouveau solde: ${balance}‚Ç¨`);
//       } else {
//         console.log('Le montant doit √™tre positif');
//       }
//     },

//     withdraw(amount) {
//       if (amount > 0) {
//         if (amount <= balance) {
//           balance -= amount;
//           console.log(`Retrait de ${amount}‚Ç¨. Nouveau solde: ${balance}‚Ç¨`);
//         } else {
//           console.log('Fonds insuffisants');
//         }
//       } else {
//         console.log('Le montant doit √™tre positif');
//       }
//     },

//     getBalance() {
//       return balance;
//     }
//   };
// }

// Test du compte bancaire
console.log("\nüß™ Test compte bancaire:");
try {
  // const account = createBankAccount(100);
  // account.deposit(50);   // D√©p√¥t de 50‚Ç¨. Nouveau solde: 150‚Ç¨
  // account.withdraw(30);  // Retrait de 30‚Ç¨. Nouveau solde: 120‚Ç¨
  // account.withdraw(200); // Fonds insuffisants
  // console.log('Solde final:', account.getBalance()); // 120

  // // V√©rification de l'encapsulation
  // console.log('Variable balance accessible?', typeof balance); // undefined
  console.log("‚è≥ Impl√©mentez createBankAccount()");
} catch (error) {
  console.log("‚ùå Erreur:", error.message);
}

// TODO 2: Compteur avec closure
console.log("\n‚úÖ Exercice 2: Cr√©ateur de compteurs");

// function createCounter(start = 0, step = 1) {
//   let count = start;

//   return {
//     increment() {
//       count += step;
//       return count;
//     },

//     decrement() {
//       count -= step;
//       return count;
//     },

//     getValue() {
//       return count;
//     },

//     reset() {
//       count = start;
//       return count;
//     }
//   };
// }

// Test des compteurs
console.log("\nüß™ Test compteurs:");
try {
  // const counter1 = createCounter();     // Par d√©faut: start=0, step=1
  // const counter2 = createCounter(10, 2); // start=10, step=2

  // console.log('Counter1 increment:', counter1.increment()); // 1
  // console.log('Counter1 increment:', counter1.increment()); // 2
  // console.log('Counter2 increment:', counter2.increment()); // 12
  // console.log('Counter2 decrement:', counter2.decrement()); // 10

  // console.log('Les compteurs sont ind√©pendants:');
  // console.log('Counter1 value:', counter1.getValue()); // 2
  // console.log('Counter2 value:', counter2.getValue()); // 10
  console.log("‚è≥ Impl√©mentez createCounter()");
} catch (error) {
  console.log("‚ùå Erreur:", error.message);
}

// TODO 3: Cache avec closure
console.log("\n‚úÖ Exercice 3: Syst√®me de cache");

// function createCache() {
//   const cache = new Map();

//   return {
//     set(key, value) {
//       cache.set(key, value);
//       console.log(`Cache: Cl√© "${key}" sauvegard√©e`);
//     },

//     get(key) {
//       if (cache.has(key)) {
//         console.log(`Cache: Hit pour "${key}"`);
//         return cache.get(key);
//       } else {
//         console.log(`Cache: Miss pour "${key}"`);
//         return undefined;
//       }
//     },

//     has(key) {
//       return cache.has(key);
//     },

//     clear() {
//       cache.clear();
//       console.log('Cache: Vid√©');
//     },

//     size() {
//       return cache.size;
//     }
//   };
// }

// TODO 4: Configuration avec closure
console.log("\n‚úÖ Exercice 4: Gestionnaire de configuration");

// function createConfig(defaults = {}) {
//   let config = { ...defaults };

//   return {
//     get(key) {
//       return key ? config[key] : { ...config };
//     },

//     set(key, value) {
//       if (typeof key === 'object') {
//         // Mise √† jour multiple: set({key1: value1, key2: value2})
//         config = { ...config, ...key };
//       } else {
//         // Mise √† jour simple: set('key', 'value')
//         config[key] = value;
//       }
//     },

//     reset() {
//       config = { ...defaults };
//     },

//     has(key) {
//       return key in config;
//     }
//   };
// }

// Tests avanc√©s
console.log("\nüß™ Tests avanc√©s:");
try {
  // const cache = createCache();
  // cache.set('user1', { name: 'Alice', age: 25 });
  // cache.set('user2', { name: 'Bob', age: 30 });
  // console.log('User1 du cache:', cache.get('user1'));
  // console.log('Taille du cache:', cache.size());

  // const config = createConfig({ theme: 'dark', lang: 'fr' });
  // console.log('Config initiale:', config.get());
  // config.set('theme', 'light');
  // config.set({ apiUrl: 'https://api.example.com', timeout: 5000 });
  // console.log('Config mise √† jour:', config.get());
  console.log("‚è≥ Impl√©mentez les fonctions pour voir les tests");
} catch (error) {
  console.log("‚ùå Erreur:", error.message);
}

// TODO 5: Factory avec closure priv√©e
console.log("\n‚úÖ Exercice 5: Factory pattern avec m√©thodes priv√©es");

// function createUser(name, email) {
//   // Variables priv√©es
//   let _name = name;
//   let _email = email;
//   let _id = Math.random().toString(36).substr(2, 9);
//   let _loginCount = 0;

//   // M√©thodes priv√©es
//   function _validateEmail(email) {
//     return email.includes('@') && email.includes('.');
//   }

//   function _log(action) {
//     console.log(`User ${_id}: ${action}`);
//   }

//   // Interface publique
//   return {
//     // Getters
//     getName() {
//       return _name;
//     },

//     getEmail() {
//       return _email;
//     },

//     getId() {
//       return _id;
//     },

//     getLoginCount() {
//       return _loginCount;
//     },

//     // Setters avec validation
//     setName(newName) {
//       if (typeof newName === 'string' && newName.length > 0) {
//         _log(`Name changed from ${_name} to ${newName}`);
//         _name = newName;
//       } else {
//         throw new Error('Invalid name');
//       }
//     },

//     setEmail(newEmail) {
//       if (_validateEmail(newEmail)) {
//         _log(`Email changed from ${_email} to ${newEmail}`);
//         _email = newEmail;
//       } else {
//         throw new Error('Invalid email format');
//       }
//     },

//     // Actions
//     login() {
//       _loginCount++;
//       _log(`Logged in (${_loginCount} times total)`);
//     },

//     getProfile() {
//       return {
//         id: _id,
//         name: _name,
//         email: _email,
//         loginCount: _loginCount
//       };
//     }
//   };
// }

// BONUS: Closure avec √©tat partag√©
console.log("\nüèÜ BONUS: √âtat partag√© entre instances");

// const UserManager = (function() {
//   let users = [];
//   let nextId = 1;

//   return {
//     createUser(name, email) {
//       const user = {
//         id: nextId++,
//         name,
//         email,
//         createdAt: new Date()
//       };
//       users.push(user);
//       return user;
//     },

//     getAllUsers() {
//       return [...users]; // Copie pour √©viter les mutations
//     },

//     findUser(id) {
//       return users.find(user => user.id === id);
//     },

//     getUserCount() {
//       return users.length;
//     },

//     clearAllUsers() {
//       users = [];
//       nextId = 1;
//     }
//   };
// })();

// Tests finaux
console.log("\nüß™ Tests finaux:");
try {
  // const user1 = createUser('Alice', 'alice@test.com');
  // user1.login();
  // user1.setName('Alice Smith');
  // console.log('Profil user1:', user1.getProfile());

  // console.log('UserManager tests:');
  // UserManager.createUser('Bob', 'bob@test.com');
  // UserManager.createUser('Charlie', 'charlie@test.com');
  // console.log('Nombre d\'utilisateurs:', UserManager.getUserCount());
  // console.log('Tous les utilisateurs:', UserManager.getAllUsers());
  console.log(
    "‚è≥ Impl√©mentez toutes les fonctions pour voir les tests complets"
  );
} catch (error) {
  console.log("‚ùå Erreur:", error.message);
}

// CONCEPTS CL√âS
console.log("\nüìã CONCEPTS CL√âS DES CLOSURES:");
console.log(
  "‚úÖ Encapsulation - Variables priv√©es inaccessibles de l'ext√©rieur"
);
console.log("‚úÖ Persistance - √âtat conserv√© entre les appels");
console.log(
  "‚úÖ Factory pattern - Cr√©ation d'objets avec comportement similaire"
);
console.log(
  "‚úÖ Module pattern - Organisation du code en modules priv√©s/publics"
);

// QUESTIONS DE R√âFLEXION
console.log("\n‚ùì Questions:");
console.log("‚Ä¢ Pourquoi les closures sont-elles utiles pour l'encapsulation?");
console.log("‚Ä¢ Comment les closures diff√®rent-elles des classes?");
console.log("‚Ä¢ Quels sont les risques de m√©moire avec les closures?");
console.log("‚Ä¢ Dans quels cas pr√©f√©rer closures vs classes ES6?");
