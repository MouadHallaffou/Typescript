// ===============================
// Exercice 12: Async/Await
// ===============================

console.log("‚ö° Exercice 12: Async/Await");
console.log("===========================");

console.log("\nüìö Async/Await permet:");
console.log("‚Ä¢ √âcrire du code asynchrone qui ressemble au code synchrone");
console.log("‚Ä¢ Remplacer .then() par await");
console.log("‚Ä¢ G√©rer les erreurs avec try/catch");
console.log("‚Ä¢ Am√©liorer la lisibilit√© du code asynchrone");

// Fonctions utilitaires pour les exemples
function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

function simulateApiCall(endpoint, delayMs = 1000, shouldFail = false) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (shouldFail) {
        reject(new Error(`Erreur API sur ${endpoint}`));
      } else {
        resolve({
          endpoint,
          status: 200,
          data: `Donn√©es de ${endpoint}`,
          timestamp: new Date().toISOString(),
        });
      }
    }, delayMs);
  });
}

// TODO 1: Conversion Promise vers Async/Await
console.log("\n‚úÖ Exercice 1: Conversion Promise ‚Üí Async/Await");

// Version avec Promises (√† convertir)
function fetchUserDataPromises(userId) {
  console.log("üîÑ Version Promises...");
  return simulateApiCall(`/users/${userId}`, 500)
    .then((userResponse) => {
      console.log("üë§ Utilisateur r√©cup√©r√©");
      return simulateApiCall(`/users/${userId}/profile`, 300);
    })
    .then((profileResponse) => {
      console.log("üìã Profil r√©cup√©r√©");
      return simulateApiCall(`/users/${userId}/posts`, 700);
    })
    .then((postsResponse) => {
      console.log("üìù Posts r√©cup√©r√©s");
      return {
        user: "User data",
        profile: "Profile data",
        posts: "Posts data",
      };
    })
    .catch((error) => {
      console.log("‚ùå Erreur Promises:", error.message);
      throw error;
    });
}

// Version async/await
// async function fetchUserDataAsync(userId) {
//   try {
//     console.log('‚ö° Version Async/Await...');

//     console.log('üîÑ R√©cup√©ration utilisateur...');
//     const userResponse = await simulateApiCall(`/users/${userId}`, 500);
//     console.log('üë§ Utilisateur r√©cup√©r√©');

//     console.log('üîÑ R√©cup√©ration profil...');
//     const profileResponse = await simulateApiCall(`/users/${userId}/profile`, 300);
//     console.log('üìã Profil r√©cup√©r√©');

//     console.log('üîÑ R√©cup√©ration posts...');
//     const postsResponse = await simulateApiCall(`/users/${userId}/posts`, 700);
//     console.log('üìù Posts r√©cup√©r√©s');

//     return {
//       user: userResponse.data,
//       profile: profileResponse.data,
//       posts: postsResponse.data
//     };
//   } catch (error) {
//     console.log('‚ùå Erreur Async/Await:', error.message);
//     throw error;
//   }
// }

// Test des deux versions
console.log("\nüß™ Test conversion Promises ‚Üí Async/Await:");
try {
  // Comparaison des deux approches
  console.log("Test avec Promises:");
  // fetchUserDataPromises(123)
  //   .then(result => console.log('‚úÖ R√©sultat Promises:', result))
  //   .catch(error => console.log('‚ùå √âchec Promises:', error.message));

  // setTimeout(async () => {
  //   console.log('\nTest avec Async/Await:');
  //   try {
  //     const result = await fetchUserDataAsync(123);
  //     console.log('‚úÖ R√©sultat Async/Await:', result);
  //   } catch (error) {
  //     console.log('‚ùå √âchec Async/Await:', error.message);
  //   }
  // }, 2000);

  console.log("‚è≥ Impl√©mentez fetchUserDataAsync()");
} catch (error) {
  console.log("‚ùå Erreur:", error.message);
}

// TODO 2: Async/Await avec Promise.all()
console.log("\n‚úÖ Exercice 2: Async/Await + Promise.all()");

// async function fetchMultipleResourcesSequentially(userId) {
//   console.log('üêå Ex√©cution s√©quentielle (lente)...');
//   const start = Date.now();

//   try {
//     const user = await simulateApiCall(`/users/${userId}`, 800);
//     const posts = await simulateApiCall(`/posts`, 600);
//     const comments = await simulateApiCall(`/comments`, 400);

//     const end = Date.now();
//     console.log(`‚è±Ô∏è Temps s√©quentiel: ${end - start}ms`);

//     return { user: user.data, posts: posts.data, comments: comments.data };
//   } catch (error) {
//     console.log('‚ùå Erreur s√©quentielle:', error.message);
//     throw error;
//   }
// }

// async function fetchMultipleResourcesParallel(userId) {
//   console.log('üöÄ Ex√©cution parall√®le (rapide)...');
//   const start = Date.now();

//   try {
//     const [user, posts, comments] = await Promise.all([
//       simulateApiCall(`/users/${userId}`, 800),
//       simulateApiCall(`/posts`, 600),
//       simulateApiCall(`/comments`, 400)
//     ]);

//     const end = Date.now();
//     console.log(`‚ö° Temps parall√®le: ${end - start}ms`);

//     return {
//       user: user.data,
//       posts: posts.data,
//       comments: comments.data
//     };
//   } catch (error) {
//     console.log('‚ùå Erreur parall√®le:', error.message);
//     throw error;
//   }
// }

console.log("\nüß™ Test s√©quentiel vs parall√®le:");
try {
  // console.log('Comparaison des performances...');

  // // Test s√©quentiel
  // fetchMultipleResourcesSequentially(456)
  //   .then(result => {
  //     console.log('üìä R√©sultat s√©quentiel:', Object.keys(result));
  //   })
  //   .catch(error => console.log('‚ùå √âchec s√©quentiel:', error.message));

  // // Test parall√®le apr√®s 3 secondes
  // setTimeout(() => {
  //   fetchMultipleResourcesParallel(456)
  //     .then(result => {
  //       console.log('üìä R√©sultat parall√®le:', Object.keys(result));
  //     })
  //     .catch(error => console.log('‚ùå √âchec parall√®le:', error.message));
  // }, 3000);

  console.log("‚è≥ Impl√©mentez les versions s√©quentielle et parall√®le");
} catch (error) {
  console.log("‚ùå Erreur:", error.message);
}

// TODO 3: Gestion d'erreurs avanc√©e avec async/await
console.log("\n‚úÖ Exercice 3: Gestion d'erreurs avanc√©e");

// async function robustApiCall(endpoint, maxRetries = 3) {
//   let lastError;

//   for (let attempt = 1; attempt <= maxRetries; attempt++) {
//     try {
//       console.log(`üîÑ Tentative ${attempt}/${maxRetries} pour ${endpoint}`);

//       const result = await simulateApiCall(endpoint, 300, Math.random() < 0.6);
//       console.log(`‚úÖ Succ√®s √† la tentative ${attempt}`);
//       return result;

//     } catch (error) {
//       lastError = error;
//       console.log(`‚ùå √âchec tentative ${attempt}: ${error.message}`);

//       if (attempt < maxRetries) {
//         console.log('‚è≥ Attente avant nouvelle tentative...');
//         await delay(500);
//       }
//     }
//   }

//   console.log(`üí• √âchec d√©finitif apr√®s ${maxRetries} tentatives`);
//   throw lastError;
// }

// async function fetchWithErrorHandling() {
//   const endpoints = ['/users', '/posts', '/error-endpoint', '/comments'];
//   const results = [];
//   const errors = [];

//   for (const endpoint of endpoints) {
//     try {
//       const result = await robustApiCall(endpoint, 2);
//       results.push({ endpoint, status: 'success', data: result.data });
//     } catch (error) {
//       errors.push({ endpoint, status: 'error', message: error.message });
//       // Continue avec les autres endpoints m√™me en cas d'erreur
//     }
//   }

//   return { results, errors };
// }

console.log("\nüß™ Test gestion d'erreurs avanc√©e:");
try {
  // fetchWithErrorHandling()
  //   .then(summary => {
  //     console.log('\nüìä R√©sum√© des appels:');
  //     console.log(`‚úÖ Succ√®s: ${summary.results.length}`);
  //     console.log(`‚ùå Erreurs: ${summary.errors.length}`);

  //     summary.results.forEach(result => {
  //       console.log(`  ‚úÖ ${result.endpoint}: ${result.data}`);
  //     });

  //     summary.errors.forEach(error => {
  //       console.log(`  ‚ùå ${error.endpoint}: ${error.message}`);
  //     });
  //   });

  console.log("‚è≥ Impl√©mentez la gestion d'erreurs robuste");
} catch (error) {
  console.log("‚ùå Erreur:", error.message);
}

// TODO 4: Async/Await avec timeouts
console.log("\n‚úÖ Exercice 4: Timeouts avec async/await");

// function withTimeout(promise, timeoutMs) {
//   const timeoutPromise = new Promise((_, reject) => {
//     setTimeout(() => {
//       reject(new Error(`Timeout apr√®s ${timeoutMs}ms`));
//     }, timeoutMs);
//   });

//   return Promise.race([promise, timeoutPromise]);
// }

// async function fetchWithTimeout(endpoint, timeoutMs = 2000) {
//   try {
//     console.log(`‚è±Ô∏è Appel avec timeout de ${timeoutMs}ms vers ${endpoint}`);

//     const result = await withTimeout(
//       simulateApiCall(endpoint, 1500), // API qui prend 1.5s
//       timeoutMs
//     );

//     console.log('‚úÖ Appel termin√© dans les temps');
//     return result;

//   } catch (error) {
//     if (error.message.includes('Timeout')) {
//       console.log('‚è∞ Timeout d√©tect√©!');
//     } else {
//       console.log('‚ùå Autre erreur:', error.message);
//     }
//     throw error;
//   }
// }

console.log("\nüß™ Test timeouts:");
try {
  // // Test avec timeout suffisant
  // console.log('Test 1: Timeout suffisant (3 secondes)');
  // fetchWithTimeout('/slow-api', 3000)
  //   .then(result => console.log('‚úÖ Succ√®s avec timeout:', result.data))
  //   .catch(error => console.log('‚ùå √âchec avec timeout:', error.message));

  // // Test avec timeout insuffisant
  // setTimeout(() => {
  //   console.log('\nTest 2: Timeout insuffisant (1 seconde)');
  //   fetchWithTimeout('/slow-api', 1000)
  //     .then(result => console.log('‚úÖ Succ√®s rapide:', result.data))
  //     .catch(error => console.log('‚è∞ Timeout d√©tect√©:', error.message));
  // }, 4000);

  console.log("‚è≥ Impl√©mentez withTimeout() et fetchWithTimeout()");
} catch (error) {
  console.log("‚ùå Erreur:", error.message);
}

// TODO 5: Async iterators et for await...of
console.log("\n‚úÖ Exercice 5: Async Iterators");

// async function* generateAsyncNumbers(count, delay = 500) {
//   for (let i = 1; i <= count; i++) {
//     await new Promise(resolve => setTimeout(resolve, delay));
//     console.log(`üì¶ G√©n√©ration du nombre ${i}`);
//     yield i * i; // Carr√©s des nombres
//   }
// }

// async function* fetchPaginatedData(totalPages = 3) {
//   for (let page = 1; page <= totalPages; page++) {
//     console.log(`üìÑ R√©cup√©ration page ${page}/${totalPages}`);

//     try {
//       const response = await simulateApiCall(`/data?page=${page}`, 400);
//       yield {
//         page,
//         data: [`Item ${page}-1`, `Item ${page}-2`, `Item ${page}-3`],
//         timestamp: response.timestamp
//       };
//     } catch (error) {
//       console.log(`‚ùå Erreur page ${page}:`, error.message);
//       yield { page, error: error.message };
//     }
//   }
// }

// async function processAsyncData() {
//   console.log('üîÑ Traitement des donn√©es asynchrones...');

//   // Traiter les nombres g√©n√©r√©s
//   console.log('\nüìä Nombres carr√©s:');
//   for await (const square of generateAsyncNumbers(4, 300)) {
//     console.log(`  ‚û§ Carr√© re√ßu: ${square}`);
//   }

//   // Traiter les donn√©es pagin√©es
//   console.log('\nüìÑ Donn√©es pagin√©es:');
//   for await (const pageData of fetchPaginatedData(3)) {
//     if (pageData.error) {
//       console.log(`  ‚ùå Page ${pageData.page}: ${pageData.error}`);
//     } else {
//       console.log(`  ‚úÖ Page ${pageData.page}: ${pageData.data.length} items`);
//     }
//   }
// }

console.log("\nüß™ Test async iterators:");
try {
  // processAsyncData()
  //   .then(() => console.log('üèÅ Traitement termin√©'))
  //   .catch(error => console.log('‚ùå Erreur traitement:', error.message));

  console.log("‚è≥ Impl√©mentez les async generators et le traitement");
} catch (error) {
  console.log("‚ùå Erreur:", error.message);
}

// BONUS: Top-level await (Node.js 14.8+)
console.log("\nüèÜ BONUS: Top-level await");

// Dans un module ES6, vous pouvez utiliser await au niveau sup√©rieur
console.log("üí° Exemple de top-level await:");
console.log(`
// fichier: data-fetcher.mjs
const userData = await fetch('/api/user').then(r => r.json());
export default userData;

// Plus besoin de wrapper async function!
`);

// Simulation d'une initialisation asynchrone
// async function initializeApp() {
//   console.log('üöÄ Initialisation de l\'application...');

//   try {
//     // Chargement de la configuration
//     const config = await simulateApiCall('/config', 300);
//     console.log('‚öôÔ∏è Configuration charg√©e');

//     // Authentification
//     const auth = await simulateApiCall('/auth', 200);
//     console.log('üîê Authentification r√©ussie');

//     // Donn√©es utilisateur
//     const user = await simulateApiCall('/user', 150);
//     console.log('üë§ Donn√©es utilisateur charg√©es');

//     console.log('‚úÖ Application initialis√©e avec succ√®s');
//     return { config, auth, user };

//   } catch (error) {
//     console.log('üí• √âchec de l\'initialisation:', error.message);
//     throw error;
//   }
// }

console.log("\nüß™ Test initialisation asynchrone:");
try {
  // initializeApp()
  //   .then(appData => {
  //     console.log('üéâ Application pr√™te!');
  //     console.log('üìä Modules charg√©s:', Object.keys(appData));
  //   })
  //   .catch(error => {
  //     console.log('üíî √âchec du d√©marrage:', error.message);
  //   });

  console.log("‚è≥ Impl√©mentez initializeApp()");
} catch (error) {
  console.log("‚ùå Erreur:", error.message);
}

// PATTERNS COURANTS
console.log("\nüìã PATTERNS AVEC ASYNC/AWAIT:");
console.log("‚úÖ try/catch - Gestion d'erreurs claire");
console.log("‚úÖ Promise.all + await - Parall√©lisme simple");
console.log("‚úÖ for await...of - Traitement de flux asynchrones");
console.log("‚úÖ Timeout wrapper - Protection contre les appels lents");
console.log("‚úÖ Retry pattern - R√©silience avec boucles");
console.log("‚úÖ Async generators - Donn√©es en streaming");
console.log("‚úÖ Top-level await - Initialisation simplifi√©e");

// QUESTIONS DE R√âFLEXION
console.log("\n‚ùì Questions:");
console.log("‚Ä¢ Quand pr√©f√©rer async/await aux Promises?");
console.log("‚Ä¢ Comment g√©rer les performances avec async/await?");
console.log("‚Ä¢ Que se passe-t-il si on oublie await?");
console.log("‚Ä¢ Comment d√©boguer du code async/await?");
